1.RPC概述
	RPC(Remote Procedure Call Protocol)远程过程调用协议。
	通俗的描述是：客户端在不知道调用细节的情况下，调用存在于远程计算机上的某个过程或函数，就像调用本地应用程序中的一
样。
    正确的描述是：一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。

2.RPC特点：
	2.1）RPC是协议：协议意味着规范。目前典型的RPC实现包括Dubbo、Thrift、Herrty等。但这些实现往往都会附加其他重要功能
，例如Dubbo还包括服务管理、访问权限管理等功能。
    2.2）网络协议和网络IO模型对其透明：既然RPC的客户端认为自己是在调用本地对象。那么传输层使用的是TCP/
UDP还是http协议，又或者是一些其他的网络协议它就不需要关心了。既然网络协议对其透明，那么调用过程中，使用的是哪一种网络IO模型调用者也不需要关心。
    2.3）信息格式对其透明：远程调用过程中，需要传递一些参数，并且会返回一个调用结果。至于这些参数会以某种信息格式传递
给网络上的另一台计算机，这个信息格式是怎样构成的，调用方是不需要关心的。
    2.4）跨语言能力：对于调用方来说，不知道也无需知道远程的程序使用的是什么语言运行的，无论服务器方使用的是什么语言，
本次调用都应该成功，并且返回值也应该按照调用方程序语言所能理解的形式描述。

3.RPC原理
    3.1）实现RPC的程序包括5个部分：User、User-stub、RPCRuntime、Server-stub、Server。
    3.2）user：就是发起RPC调用的client，当user想发起一个远程调用时，它实际是通过本地调用user-stub。user-stub负责将
调用的接口、方法和参数通过约定的协议规范进行编码并通过本地的RPCRuntime实例传输到远程的实例。远程RPCRuntime实例收到请求后交给server-stub进行解码后发起本地端调用，调用结果再返回给user端。
    3.3）stub:为屏蔽客户调用远程主机上的对象，必须提供某种方式来模拟本地对象，这种本地对象称为存根（stub）,存根负责
接收本地方法调用，并将它们委派给各自具体实现对象。

