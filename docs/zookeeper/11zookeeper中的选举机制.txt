1.zookeeper选举机制
    zookeeper默认算法是FastLeaderElection,采用投票数大于半数则胜出的逻辑
2.概念
	2.1）服务器ID
	   比如有三台服务器，编号分别是1，2，3。编号越大在选择算法中的权重越大。
	2.2）选举状态
	   Looking，竞选状态。
	   Following，随从状态，同步leader状态，参与投票。
	   Obeserving,观察状态，同步leader状态，不参与投票。
	   Leading，领导者状态。
	2.3）数据id
	   服务器存放最新的数据version。
	   值越大说明数据越新，在选举算法中数据越新权重越大。
	2.4）逻辑时钟
	   也叫投票的次数，同一轮投票过程中的逻辑时钟值是相同的。每投完一次票这个数据就会增加，然后与接收到的其它服务器返回的投票信息中的数值相比，根据不同的值做出不同的判断。
3.全新集群选举
   3.1假设有五台服务器，每台服务器均没有数据。它们的编号分别用myid来表示1，2，3，4，5，按照标号依次启动，选举过程如下
      1）服务器1启动，给自己投票，然后发投票信息，由于其它机器还没有启动所以收不到反馈信息，服务器1就处于looking状态
      2）服务器2启动，给自己投票，同时与之前启动的服务器1交换结果，由于服务器2的编号大所以服务器2胜出，但此时投票数没有大于半数，所以两台服务器的状态依然是Looking状态
      3）服务器3启动，给自己投票，同时与之前启动的服务器1，2交换信息，由于服务器3的编号最大所以服务器3胜出，此时的投票正好大于半数，所以服务器3成为leader,前两台成为follower
      4)服务器4启动。，给自己投票，同时与之前启动的服务器123交换信息，尽管服务器4的编号大，但是服务器3已经胜出了，所以服务器4只能是follower
      5）服务器5启动，给自己投票，同时与之前启动的服务器1234交换信息，尽管服务器5的编号大，但是服务器3已经胜出了，所以服务器5只能是follower
4.非全新集群选举
   对于运行正常的zookeeper集群，中途有机器down掉，需要重新选举时，选举过程就需要加入数据id、服务器id和逻辑时钟。
   数据id：数据新的version就大，数据每次更新都会更新version。
   服务器id：就是我们配置的myid中的值，每个机器一个。
   逻辑时钟：这个值从0开始递增，每次选举对应一个值。如果在同一次选举中，这个值是一定的。
   这样的选举标准就会变成：
       1、逻辑时钟小的选举结果被忽略，重新投票；
       2、统一逻辑时钟后，数据id大的胜出；
       3、数据id相同的情况下，服务器id大的胜出；
   根据这个规则选出leader。
